m4_define([FWD_STOP_FIREWALLD], [
    pid=$(< firewalld.pid)
    kill $pid
    for I in 1 2 3 4 5 6 7 8 9 0; do
        ps --pid $pid >/dev/null || { pid=0; break; }
        sleep 1
    done
    test $pid -eq 0 || { kill -9 $pid; sleep 3; }
])

m4_define([FWD_START_FIREWALLD], [
    FIREWALLD_ARGS="--debug=2 --nofork --nopid --log-file ./firewalld.log --system-config ./"
    if test "x${FIREWALLD_DEFAULT_CONFIG}" != x ; then
        FIREWALLD_ARGS+=" --default-config ${FIREWALLD_DEFAULT_CONFIG}"
    fi

    NS_CMD([firewalld $FIREWALLD_ARGS &])
    if test $? -ne 0; then
        AT_FAIL_IF([:])
    fi
    echo "$!" > firewalld.pid

    dnl Give it some time for the dbus interface to come up
    up=0
    for I in 1 2 3 4 5 6 7 8 9 0; do
        if NS_CMD([firewall-cmd --state]); then
            up=1
            break
        fi
        sleep 1
    done
    AT_FAIL_IF([test $up -ne 1])
])

m4_define([FWD_RELOAD], [
    FWD_CHECK([-q --reload], [$1], [$2], [$3])
])

m4_define([FWD_RESTART], [
    FWD_STOP_FIREWALLD
    FWD_START_FIREWALLD
])

m4_define([FWD_START_TEST], [
    AT_SETUP([$1])

    dnl start every test with the default config
    if test "x${FIREWALLD_DEFAULT_CONFIG}" != x ; then
        AT_CHECK([if ! cp "${FIREWALLD_DEFAULT_CONFIG}/firewalld.conf" ./firewalld.conf; then exit 77; fi])
    else
        AT_CHECK([if ! cp /etc/firewalld/firewalld.conf ./firewalld.conf; then exit 77; fi])
    fi

    m4_ifdef([TESTING_FIREWALL_OFFLINE_CMD], [], [
        m4_define_default([FIREWALL_BACKEND], [nftables])

        dnl don't unload modules or bother cleaning up, the namespace will be deleted
        AT_CHECK([sed -i 's/^CleanupOnExit.*/CleanupOnExit=no/' ./firewalld.conf])

        dnl set the appropriate backend
        AT_CHECK([sed -i 's/^FirewallBackend.*/FirewallBackend=FIREWALL_BACKEND/' ./firewalld.conf])

        dnl fib matching is pretty new in nftables. Don't use rpfilter on older
        dnl kernels.
        m4_if(nftables, FIREWALL_BACKEND, [
            m4_if(no, HOST_SUPPORTS_NFT_FIB, [
                sed -i 's/^IPv6_rpfilter.*/IPv6_rpfilter=no/' ./firewalld.conf
            ])
        ])

        dnl dummy wrapper for trap syntax
        function kill_firewalld() {
            FWD_STOP_FIREWALLD
        }

        dnl run cleanup commands on test exit
        echo "" > cleanup
        trap ". ./cleanup; kill_firewalld" EXIT

        dnl create a namespace and dbus-daemon
        m4_define([CURRENT_DBUS_ADDRESS], [unix:abstract=firewalld-testsuite-dbus-system-socket-]RANDOM_NUMBER)
        m4_define([CURRENT_TEST_NS], [fwd-test-]RANDOM_NUMBER)
        echo "ip netns delete CURRENT_TEST_NS" >> ./cleanup
        AT_CHECK([ip netns add CURRENT_TEST_NS])
        AT_DATA([./dbus.conf], [
            <!DOCTYPE busconfig PUBLIC "-//freedesktop//DTD D-Bus Bus Configuration 1.0//EN"
            "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
            <busconfig>
            <fork />
            <auth>EXTERNAL</auth>
            <listen>unix:path=/tmp/dummy</listen>
            <policy context="default">
                <allow user="*"/>
                <allow send_type="signal"/>
                <allow send_requested_reply="true" send_type="method_return"/>
                <allow send_requested_reply="true" send_type="error"/>
                <allow receive_type="method_call"/>
                <allow receive_type="method_return"/>
                <allow receive_type="error"/>
                <allow receive_type="signal"/>
                <allow send_destination="org.freedesktop.DBus"/>
            </policy>
            <!-- from .../config/FirewallD.conf -->
            <policy user="root">
                <allow own="org.fedoraproject.FirewallD1"/>
                <allow own="org.fedoraproject.FirewallD1.config"/>
                <allow send_destination="org.fedoraproject.FirewallD1"/>
                <allow send_destination="org.fedoraproject.FirewallD1.config"/>
            </policy>
            <policy context="default">
                <allow send_destination="org.fedoraproject.FirewallD1"/>
                <allow send_destination="org.fedoraproject.FirewallD1"
                       send_interface="org.freedesktop.DBus.Introspectable"/>
                <allow send_destination="org.fedoraproject.FirewallD1"
                       send_interface="org.freedesktop.DBus.Properties"/>
                <allow send_destination="org.fedoraproject.FirewallD1.config"/>
            </policy>
            </busconfig>
])
        DBUS_PID=`NS_CMD([dbus-daemon --address="CURRENT_DBUS_ADDRESS" --print-pid --config-file="./dbus.conf"])`
        if test $? -ne 0; then
            AT_FAIL_IF([:])
        fi
        echo "kill $DBUS_PID" >> ./cleanup

        FWD_START_FIREWALLD
    ])
])

m4_define([FWD_END_TEST], [
    m4_ifdef([TESTING_FIREWALL_OFFLINE_CMD], [], [
        if test x"$1" != x"ignore"; then
            if test -n "$1"; then
                sed -i $1 ./firewalld.log
            fi
            AT_FAIL_IF([grep ERROR ./firewalld.log])
            AT_FAIL_IF([grep WARNING ./firewalld.log])
        fi
        m4_undefine([CURRENT_DBUS_ADDRESS])
        m4_undefine([CURRENT_TEST_NS])
    ])
    AT_CLEANUP
])

m4_define([FWD_CHECK], [
    m4_ifdef([TESTING_FIREWALL_OFFLINE_CMD], [
        dnl Silently skip tests that don't affect permanent config or other
        dnl flags we're interested in.
        dnl
        dnl if TESTING_FIREWALL_OFFLINE_CMD_PASSTHROUGH
        dnl     firewall-offline-cmd ...
        dnl else
        dnl     if ! --permanent
        dnl         if -default-zone
        dnl             firewall-offline-cmd ...
        dnl     else
        dnl         if ! --timeout
        dnl             firewall-offline-cmd ...
        dnl
        m4_ifdef([TESTING_FIREWALL_OFFLINE_CMD_PASSTHROUGH], [
            m4_define([FWD_CHECK_RUN_FIREWALL_OFFLINE_CMD])
        ], [
            m4_if(-1, m4_index([$1], [--permanent]), [
                m4_if(-1, m4_index([$1], [-default-zone]), [], [
                    m4_define([FWD_CHECK_RUN_FIREWALL_OFFLINE_CMD])
                ])
                m4_if(-1, m4_index([$1], [--check-config]), [], [
                    m4_define([FWD_CHECK_RUN_FIREWALL_OFFLINE_CMD])
                ])
            ], [
                m4_if(-1, m4_index([$1], [--timeout]), [
                    m4_define([FWD_CHECK_RUN_FIREWALL_OFFLINE_CMD])
                ], [])
            ])
        ])

        m4_ifdef([FWD_CHECK_RUN_FIREWALL_OFFLINE_CMD], [
            m4_undefine([FWD_CHECK_RUN_FIREWALL_OFFLINE_CMD])

            FIREWALL_OFFLINE_CMD_ARGS="--system-config ./"
            if test "x${FIREWALLD_DEFAULT_CONFIG}" != x ; then
                FIREWALL_OFFLINE_CMD_ARGS+=" --default-config ${FIREWALLD_DEFAULT_CONFIG}"
            fi

            AT_CHECK([firewall-offline-cmd $FIREWALL_OFFLINE_CMD_ARGS dnl
                dnl This m4 mess is all about stripping --permanent
                dnl flag if it exists, otherwise we pass arg 1 verbatim.
                m4_if(-1, m4_index([$1], [--permanent]), [$1], [ dnl
                    m4_substr([$1],0,m4_index([$1], [--permanent])) dnl before --permanent
                    m4_substr([$1],m4_eval(m4_index([$1], [--permanent])+11),m4_eval(m4_len([$1])-11)) dnl after --permanent
                ])], [$2], [$3], [$4], [$5], [$6])
        ])
    ], [
        NS_CHECK([firewall-cmd $1], [$2], [$3], [$4], [$5], [$6])
    ])
])

m4_define([FWD_GREP_LOG], [
    AT_CHECK([grep "$1" ./firewalld.log], 0, [ignore], [ignore])
])

m4_define([TRIM], [[sed -e 's/^[ \t]*//' -e 's/[ \t]*$//']])
m4_define([TRIMV], [[sed -e '/^[ \t]*$/d']])
m4_define([TRIM_INTERNAL], [[sed -e 's/[ \t]\+/ /g']])
m4_define([TRIM_WHITESPACE], [TRIM | TRIMV | TRIM_INTERNAL])

m4_define([NS_CMD], [dnl
    env DBUS_SYSTEM_BUS_ADDRESS="CURRENT_DBUS_ADDRESS" ip netns exec CURRENT_TEST_NS $1 dnl
])

m4_define([NS_CHECK], [
    AT_CHECK([NS_CMD([$1])], [$2], [$3], [$4], [$5], [$6])
])

m4_define([DBUS_CHECK], [
    NS_CHECK([dbus-send --system --print-reply --dest=org.fedoraproject.FirewallD1 dnl
              /org/fedoraproject/FirewallD1/$1 org.fedoraproject.FirewallD1.$2 $3],
             [$4], [$5], [$6], [$7], [$8])
])

m4_define([DBUS_GETALL], [
    NS_CHECK([dbus-send --system --print-reply --dest=org.fedoraproject.FirewallD1 dnl
              /org/fedoraproject/FirewallD1/$1 dnl
              org.freedesktop.DBus.Properties.GetAll string:"org.fedoraproject.FirewallD1.$2" dnl
              | tr -d [['[]']] | tail -n +2 | TRIM_WHITESPACE],
             [$3], [$4], [$5], [$6], [$7])
])

m4_define([DBUS_GET], [
    NS_CHECK([dbus-send --system --print-reply --dest=org.fedoraproject.FirewallD1 dnl
              /org/fedoraproject/FirewallD1/$1 dnl
              org.freedesktop.DBus.Properties.Get string:"org.fedoraproject.FirewallD1.$2" $3 dnl
              | tail -n +2 | TRIM_WHITESPACE],
             [$4], [$5], [$6], [$7], [$8])
])

m4_define([DBUS_SET], [
    NS_CHECK([dbus-send --system --print-reply --dest=org.fedoraproject.FirewallD1 dnl
              /org/fedoraproject/FirewallD1/$1 dnl
              org.freedesktop.DBus.Properties.Set string:"org.fedoraproject.FirewallD1.$2" $3],
             [$4], [$5], [$6], [$7], [$8])
])

m4_define([RANDOM_NUMBER], [m4_eval(m4_esyscmd([bash -c 'echo $RANDOM']))])

m4_define([CHECK_IPSET], [
    m4_if(nftables, FIREWALL_BACKEND, [
        dnl If our nft binary has buggy flush set, then skip the test
        NS_CHECK([nft add table inet firewalld_check_ipset])
        NS_CHECK([nft add set inet firewalld_check_ipset foobar { type ipv4_addr \; }])
        AT_SKIP_IF([! NS_CMD([nft flush set inet firewalld_check_ipset foobar >/dev/null 2>&1])])
        NS_CHECK([nft delete table inet firewalld_check_ipset])
    ])
])

m4_define([CHECK_IPSET_HASH_MAC], [
    dnl skip if ipset hash:mac support is there
    m4_ifdef([TESTING_FIREWALL_OFFLINE_CMD], [], [
        AT_SKIP_IF([! ipset --help | grep "hash:mac"])
        AT_SKIP_IF([! NS_CMD([ipset create foobar hash:mac >/dev/null 2>&1])])
        NS_CHECK([ipset destroy foobar])
    ])
])

m4_ifnblank(
    m4_esyscmd([
        KERNEL_VER=( $(uname -r | tr '.' ' ') )
        if test ${KERNEL_VER[0]} -eq 4 && test ${KERNEL_VER[1]} -ge 10 || test ${KERNEL_VER[0]} -gt 4; then
            echo -n "yes"
        fi
    ]),
    [m4_define([HOST_SUPPORTS_NFT_FIB], [yes])],
    [m4_define([HOST_SUPPORTS_NFT_FIB], [no])]
)
